const path = require('path');
const fs = require('fs').promises;

/**
 * XLSXÊä•ÂëäÁîüÊàêÂô®
 * Ê≥®ÊÑèÔºöËøô‰∏™ÂÆûÁé∞‰ΩøÁî®ÁÆÄÂçïÁöÑXMLÊ†ºÂºèÂàõÂª∫ExcelÊñá‰ª∂ÔºåÈÅøÂÖçÂºïÂÖ•È¢ùÂ§ñÁöÑ‰æùËµñ
 */
class XlsxGenerator {
    constructor() {
        this.outputDir = path.resolve(process.cwd(), 'data/rebuild/reports');
    }

    /**
     * ÁîüÊàêÈáçÂª∫ÁªìÊûúÊä•Âëä
     */
    async generateRebuildReport(progressTracker, sessionId) {
        try {
            // Á°Æ‰øùËæìÂá∫ÁõÆÂΩïÂ≠òÂú®
            await fs.mkdir(this.outputDir, { recursive: true });
            
            const stats = progressTracker.getProgressStats();
            const fileDetails = progressTracker.getDetailedFileStatus();
            
            // ÁîüÊàêÊñá‰ª∂Âêç
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];
            const fileName = `ÈáçÂª∫Êä•Âëä_${sessionId}_${timestamp}.xlsx`;
            const filePath = path.join(this.outputDir, fileName);
            
            // ÁîüÊàêExcelÂÜÖÂÆπ
            const xmlContent = this.generateExcelXML(stats, fileDetails);
            
            // ÂÜôÂÖ•Êñá‰ª∂
            await fs.writeFile(filePath, xmlContent, 'utf8');
            
            console.log(`Êä•ÂëäÁîüÊàêÂÆåÊàê: ${filePath}`);
            
            return {
                fileName: fileName,
                filePath: filePath,
                stats: stats
            };
            
        } catch (error) {
            console.error('ÁîüÊàêXLSXÊä•ÂëäÂ§±Ë¥•:', error);
            throw error;
        }
    }

    /**
     * ÁîüÊàêExcel XMLÂÜÖÂÆπ
     */
    generateExcelXML(stats, fileDetails) {
        const escapeXml = (text) => {
            if (text === null || text === undefined) return '';
            return String(text)
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;');
        };

        const formatDate = (dateString) => {
            if (!dateString) return '';
            return new Date(dateString).toLocaleString('zh-CN');
        };

        const getStatusText = (status) => {
            const statusMap = {
                'completed': '‚úÖ Â∑≤ÂÆåÊàê',
                'failed': '‚ùå Â§±Ë¥•',
                'skipped': '‚è≠Ô∏è Ë∑≥Ëøá',
                'pending': '‚è≥ ÂæÖÂ§ÑÁêÜ',
                'processing': 'üîÑ Â§ÑÁêÜ‰∏≠'
            };
            return statusMap[status] || status;
        };

        // ÁªüËÆ°‰ø°ÊÅØË°å
        const summaryRows = [
            ['ÁªüËÆ°È°πÁõÆ', 'Êï∞ÂÄº'],
            ['‰ºöËØùID', escapeXml(stats.sessionId)],
            ['ÂºÄÂßãÊó∂Èó¥', formatDate(stats.startTime)],
            ['ÊúÄÂêéÊõ¥Êñ∞', formatDate(stats.lastUpdateTime)],
            ['ÊÄªÊñá‰ª∂Êï∞', stats.totalFiles],
            ['Â∑≤ÂÆåÊàê', stats.completedFiles],
            ['Â§±Ë¥•', stats.failedFiles],
            ['Ë∑≥Ëøá', stats.skippedFiles],
            ['ÂæÖÂ§ÑÁêÜ', stats.pendingFiles],
            ['Â§ÑÁêÜ‰∏≠', stats.processingFiles],
            ['ÂÆåÊàêÁéá', `${stats.progressPercentage}%`],
            [''], // Á©∫Ë°å
            ['Êñá‰ª∂Âêç', 'Áä∂ÊÄÅ', 'Â∏ñÂ≠êID', 'Â∏ñÂ≠êÂêçÁß∞', 'Ê∂àÊÅØÊï∞', 'ÂÆåÊàêÊó∂Èó¥', 'ÈîôËØØ‰ø°ÊÅØ']
        ];

        // Êñá‰ª∂ËØ¶ÊÉÖË°å
        const detailRows = fileDetails.map(file => [
            escapeXml(file.fileName),
            getStatusText(file.status),
            escapeXml(file.threadId || ''),
            escapeXml(file.threadName || ''),
            file.messagesCount || 0,
            formatDate(file.completedAt || file.failedAt || file.skippedAt),
            escapeXml(file.error || file.skipReason || '')
        ]);

        const allRows = [...summaryRows, ...detailRows];

        // ÁîüÊàêXML
        let xml = `<?xml version="1.0" encoding="UTF-8"?>
<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"
          xmlns:o="urn:schemas-microsoft-com:office:office"
          xmlns:x="urn:schemas-microsoft-com:office:excel"
          xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"
          xmlns:html="http://www.w3.org/TR/REC-html40">
  <Worksheet ss:Name="ÈáçÂª∫Êä•Âëä">
    <Table>`;

        allRows.forEach((row, rowIndex) => {
            xml += '\n      <Row>';
            row.forEach((cell, cellIndex) => {
                const cellType = typeof cell === 'number' ? 'Number' : 'String';
                xml += `<Cell><Data ss:Type="${cellType}">${escapeXml(cell)}</Data></Cell>`;
            });
            xml += '</Row>';
        });

        xml += `
    </Table>
  </Worksheet>
</Workbook>`;

        return xml;
    }

    /**
     * Ëé∑ÂèñÊä•ÂëäÊñá‰ª∂ÂàóË°®
     */
    async getReportFiles() {
        try {
            const files = await fs.readdir(this.outputDir);
            return files
                .filter(file => file.endsWith('.xlsx'))
                .map(file => ({
                    name: file,
                    path: path.join(this.outputDir, file)
                }));
        } catch (error) {
            if (error.code === 'ENOENT') {
                return [];
            }
            throw error;
        }
    }

    /**
     * Ê∏ÖÁêÜÊóßÁöÑÊä•ÂëäÊñá‰ª∂
     */
    async cleanOldReports(daysToKeep = 7) {
        try {
            const files = await this.getReportFiles();
            const cutoffTime = Date.now() - (daysToKeep * 24 * 60 * 60 * 1000);
            
            for (const file of files) {
                const stats = await fs.stat(file.path);
                if (stats.mtime.getTime() < cutoffTime) {
                    await fs.unlink(file.path);
                    console.log(`Ê∏ÖÁêÜÊóßÊä•Âëä: ${file.name}`);
                }
            }
        } catch (error) {
            console.error('Ê∏ÖÁêÜÊóßÊä•ÂëäÂ§±Ë¥•:', error);
        }
    }
}

module.exports = XlsxGenerator; 